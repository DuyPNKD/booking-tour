const express = require("express");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const db = require("../config/db");
require("dotenv").config();

const router = express.Router();
const authMiddleware = require("../middlewares/authMiddleware");
const {sendVerificationEmail} = require("../utils/mailer");

router.get("/ping", (req, res) => {
    res.send("Auth route OK");
});

// üìå ƒêƒÉng k√Ω
router.post("/register", async (req, res) => {
    try {
        // console.log("Request body:", req.body); // üëÄ log ra ƒë·ªÉ debug
        const {name, emailOrPhone, password} = req.body;
        const email = emailOrPhone; // ‚úÖ g√°n l·∫°i cho d·ªÖ hi·ªÉu

        // 1. Check tr√πng email/phone
        const [existing] = await db.query("SELECT * FROM users WHERE email = ?", [email]);
        if (existing.length > 0) {
            return res.status(400).json({message: "Email ƒë√£ t·ªìn t·∫°i"});
        }

        // 2. M√£ ho√° m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, 10);

        // 3. L∆∞u user v·ªõi is_active = 0
        const [result] = await db.query("INSERT INTO users (name, email, password, is_active) VALUES (?, ?, ?, 0)", [name, email, hashedPassword]);
        const userId = result.insertId;

        // 4. Sinh m√£ OTP (6 s·ªë)
        const code = Math.floor(100000 + Math.random() * 900000).toString();
        const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // h·∫øt h·∫°n sau 5 ph√∫t

        await db.query("INSERT INTO user_verifications (user_id, code, expires_at) VALUES (?, ?, ?)", [userId, code, expiresAt]);

        // 5. G·ª≠i email
        await sendVerificationEmail(email, code);

        res.status(201).json({message: "ƒêƒÉng k√Ω th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c."});
    } catch (error) {
        console.error(error);
        res.status(500).json({message: "L·ªói server"});
    }
});

// üìå ƒêƒÉng nh·∫≠p
router.post("/login", async (req, res) => {
    try {
        const {emailOrPhone, password} = req.body;
        console.log("Login attempt with:", {emailOrPhone, password});
        // 1. T√¨m user theo email/phone
        const [users] = await db.query("SELECT * FROM users WHERE email = ?", [emailOrPhone]);
        if (users.length === 0) {
            return res.status(400).json({message: "Email kh√¥ng t·ªìn t·∫°i"});
        }

        const user = users[0];

        // 2. So s√°nh m·∫≠t kh·∫©u
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({message: "Sai m·∫≠t kh·∫©u"});
        }

        // 3. T·∫°o token
        const payload = {id: user.id, name: user.name, email: user.email};
        const token = jwt.sign(payload, process.env.JWT_SECRET, {expiresIn: "7d"});

        // 4. Tr·∫£ v·ªÅ token + th√¥ng tin user
        res.json({token, user: payload});
    } catch (error) {
        console.error(error);
        res.status(500).json({message: "L·ªói server"});
    }
});

// üìå L·∫•y th√¥ng tin user t·ª´ token
router.get("/me", authMiddleware, async (req, res) => {
    try {
        // req.user ƒë∆∞·ª£c g·∫Øn t·ª´ middleware (gi·∫£i m√£ t·ª´ token)
        res.json({user: req.user});
    } catch (error) {
        console.error(error);
        res.status(500).json({message: "L·ªói server"});
    }
});

// üìå X√°c th·ª±c t√†i kho·∫£n
router.post("/verify", async (req, res) => {
    try {
        const {email, code} = req.body;

        // 1. L·∫•y user
        const [users] = await db.query("SELECT * FROM users WHERE email = ?", [email]);
        if (users.length === 0) return res.status(400).json({message: "Kh√¥ng t√¨m th·∫•y user"});
        const user = users[0];

        // 2. L·∫•y OTP m·ªõi nh·∫•t
        const [verifications] = await db.query("SELECT * FROM user_verifications WHERE user_id = ? ORDER BY id DESC LIMIT 1", [user.id]);
        if (verifications.length === 0) return res.status(400).json({message: "Ch∆∞a c√≥ m√£ x√°c th·ª±c"});

        const verification = verifications[0];

        // 3. Check m√£
        if (verification.code !== code) {
            return res.status(400).json({message: "M√£ x√°c th·ª±c kh√¥ng ƒë√∫ng"});
        }

        // 4. Check h·∫°n
        if (new Date() > new Date(verification.expires_at)) {
            return res.status(400).json({message: "M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n"});
        }

        // 5. Update active
        await db.query("UPDATE users SET is_active = 1 WHERE id = ?", [user.id]);

        // 6. Sinh JWT token
        const token = jwt.sign(
            {id: user.id, email: user.email},
            process.env.JWT_SECRET,
            {expiresIn: "7d"} // token s·ªëng 7 ng√†y
        );

        // 7. Tr·∫£ v·ªÅ cho frontend
        res.json({
            message: "X√°c th·ª±c th√†nh c√¥ng, t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t",
            token,
            user: {
                id: user.id,
                name: user.name,
                email: user.email,
            },
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({message: "L·ªói server"});
    }
});

// üìå Resend OTP
router.post("/resend-otp", async (req, res) => {
    try {
        const {email} = req.body;

        if (!email) {
            return res.status(400).json({message: "Email l√† b·∫Øt bu·ªôc"});
        }

        // 1. Ki·ªÉm tra user t·ªìn t·∫°i ch∆∞a
        const [users] = await db.query("SELECT * FROM users WHERE email = ?", [email]);
        if (users.length === 0) {
            return res.status(404).json({message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"});
        }

        const user = users[0];

        // 2. Sinh OTP m·ªõi (6 s·ªë ng·∫´u nhi√™n)
        const otp = Math.floor(100000 + Math.random() * 900000).toString();

        // 3. L∆∞u OTP v√† h·∫°n s·ª≠ d·ª•ng (5 ph√∫t)
        const expiresAt = new Date(Date.now() + 5 * 60 * 1000);

        await db.query("UPDATE users SET otp_code = ?, otp_expires = ? WHERE id = ?", [otp, expiresAt, user.id]);

        // 4. G·ª≠i email
        await sendVerificationEmail(email, otp);

        res.json({message: "ƒê√£ g·ª≠i l·∫°i m√£ x√°c th·ª±c qua email!"});
    } catch (err) {
        console.error(err);
        res.status(500).json({message: "L·ªói server khi g·ª≠i l·∫°i m√£"});
    }
});

module.exports = router;
